;;(require 'git)
;;(require 'twittering-mode)
(add-to-list 'load-path "~/.emacs.d/color-theme-6.6.0/")
;;(add-to-list 'load-path "~/auto-complete-1.3.1")
(load "~/.emacs.d/spotify")
(load "~/.emacs.d/cuda")
;;AucTex
;;(add-to-list 'load-path "~/.emacs.d/elpa/auctex-11.87.2/")
;;(require 'tex-site)
;;(load "auctex.el" nil t t)
;;(load "preview-latex.el" nil t t)
;;(setq TeX-auto-save t)
;;(setq TeX-parse-self t)
;;(setq-default TeX-master nil)
(when (>= emacs-major-version 24)
	(require 'package)
	(add-to-list
		'package-archives
		'("melpa" . "http://melpa.org/packages/")
	 t)
	(package-initialize))
(winner-mode 1)
(when (memq window-system '(mac ns x))
	(exec-path-from-shell-initialize))
(electric-pair-mode 1)
(ac-config-default)
(define-key ac-mode-map (kbd "M-TAB") 'auto-complete)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(google-this-mode 1)
(global-display-line-numbers-mode)

;;Make compilation window automatically disappear if successful
(setq compilation-finish-functions
	(lambda (buf str)
		(if (null (string-match ".exited abnormally.*" str))
		;; no errors
		(progn
			(run-at-time "0.4 sec" nil
				(lambda ()
					(select-window (get-buffer-window (get-buffer-create "*compilation*")))
					(switch-to-buffer nil)))
			(message "No Compilation Errors!")))))

(defun turn-on-outline-minor-mode ()
 (outline-minor-mode 1))
(add-hook 'LaTeX-mode-hook 'turn-on-outline-minor-mode)
(add-hook 'latex-mode-hook 'turn-on-outline-minor-mode)
(setq outline-minor-mode-prefix "\C-c\@")

;; FlySpell
(setq ispell-program-name "aspell")
(setq ispell-dictionary "english")
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-buffer)

;; Auctex-LatexMK
;;(use-package auctex-latexmk
;;	:ensure t)
(eval-after-load "tex"
	'(progn
		(add-to-list 'TeX-expand-list
			     '("%(-PDF)"
			       (lambda ()
				(cond ((string-match "TeX-engine: pdftex" (buffer-string)) "-pdf")
				      ((string-match "TeX-engine: luatex" (buffer-string)) "-pdflatex=lualatex -pdf")
				      ((string-match "TeX-engine: xetex"  (buffer-string)) "-pdflatex=xelatex -pdf")
				      (t "-dvi -pdfps")))))
		(add-to-list 'TeX-command-list
			'("Latexmk" "latexmk %(-PDF) -synctex=1 %s"
			TeX-run-TeX nil t
			:help "Run Latexmk on file to build everything."))
		(setq TeX-command-default "Latexmk")
		)
	)
(setq org-latex-to-pdf-process (list "latexmk -f -pdf %t"))
(defun th/pdf-view-revert-buffer-maybe (file)
	(let ((buf (find-buffer-visiting file)))
		(when buf
			(with-current-buffer buf
				(when (derived-mode-p 'pdf-view-mode)
				 (pdf-view-revert-buffer nil t))))))
(add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
	#'th/pdf-view-revert-buffer-maybe)
(add-hook 'TeX-after-compilation-finished-functions
	#'th/pdf-view-revert-buffer-maybe)

;; Font (original is Terminus-9)
(set-default-font "Monaco-12")

;;Startup Screen
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)

;;Removing whitespace before saving
(add-hook 'before-save-hook 'whitespace-cleanup)

;;Display Time
(load "time" t t)
(display-time)

;; Wind Move (easier than C-x o)
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))

;; EWW (Emacs Web Browser)
(setq eww-search-prefix "https://www.google.com/search?q=")
(setq shr-color-visible-luminance-min 78)
(setq url-user-agent "User-Agent: Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_0 like Mac OS X; en-us) AppleWebKit/532.9 (KHTML, like Gecko) Version/4.0.5 Mobile/8A293 Safari/6531.22.7\n")
(global-set-key (kbd "C-c b") 'eww)
(setq auto-image-file-mode t)

;; Neotree
(require 'neotree)
(global-set-key [f8] 'neotree-toggle)
(global-set-key (kbd "C-c r") 'neotree-refresh)
(setq neo-smart-open t)

;; DOOM
(require 'doom-themes)
(setq doom-themes-enable-bold t
      doom-themes-enable-italic t)
(load-theme 'doom-molokai t)
(doom-themes-visual-bell-config)
(doom-themes-neotree-config)
(require 'doom-modeline)
(doom-modeline-init)

;;(require 'color-theme)
;;(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
;;(load-theme 'spolsky t)
;;(eval-after-load "color-theme"
;;  '(progn
;;     (color-theme-initialize)
;;     (color-theme-jsc-dark)))
;;(color-theme-jsc-dark)

;; OCaml / Tuareg
(add-to-list 'load-path "/Users/muhammadkhan/.emacs.d/site-lisp/tuareg")
(autoload 'tuareg-mode "tuareg" "Major mode for editing Caml code" t)
(autoload 'ocamldebug "ocamldebug" "Run the Caml debugger" t)
(autoload 'tuareg-imenu-set-imenu "tuareg-imenu" "Configuartion of imenu for tuareg" t)
(show-paren-mode 1)
(add-hook 'tuareg-mode-hook 'tuareg-imenu-set-imenu)
(setq auto-mode-alist (append '(("\\.ml[iylp]?$" . tuareg-mode) ("\\.topml$" . tuareg-mode)) auto-mode-alist))

;; Window split line
(set-face-attribute 'vertical-border nil :foreground "#303030")

;; YASnippets
(yas-global-mode 1)

;; EShell Aesthetics
;; (defmacro with-face (str &rest properties)
;;   `(propertize ,str 'face (list ,@properties)))

;; (defun shk-eshell-prompt ()
;;   (let ((header-bg "black"))
;;     (concat
;;      (with-face (concat (eshell/pwd) " ") :background header-bg)
;;      (with-face (format-time-string "(%Y-%m-%d %H:%M) " (current-time)) :background header-bg :foreground "red")
;;      (with-face
;;       (or (ignore-errors (format "(%s)" (vc-responsible-backend default-directory))) "")
;;       :background header-bg)
;;      (with-face "\n" :background header-bg)
;;      (with-face user-login-name :foreground "blue")
;;      "@"
;;      (with-face "localhost" :foreground "green")
;;      (if (= (user-uid) 0)
;;          (with-face " #" :foreground "red")
;;        " $")
;;      " ")))
;; (setq eshell-prompt-function 'shk-eshell-prompt)
;; (setq eshell-highlight-prompt nil)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(TeX-source-correlate-mode t)
 '(TeX-source-correlate-start-server t)
 '(doc-view-continuous t)
 '(package-selected-packages
   (quote
    (auctex-latexmk pdf-tools yasnippet-snippets yasnippet doom-modeline neotree doom-themes all-the-icons tabbar auto-complete org magit twittering-mode tuareg jdee google-this git exec-path-from-shell cuda-mode auctex))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(global-set-key (kbd "C-c #") 'comment-or-uncomment-region)
(global-set-key (kbd "C-c C-v") 'revert-buffer)
